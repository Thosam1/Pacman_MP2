0a. Contents
    1: Modifications to the provided code
    2. Added classes and interfaces (includes extension descriptions)
    3. Deviations from the project description
    4. List of all extensions


0b. For a better reading experience of this document
- Extensions are flagged with "[extension]" or "[extension area]"

- Classes, abstract classes, interfaces and enumerations are flagged with
"(class)", "(abstract class)", "(interface)", and "(enum)", respectively.



1. Modifications to the provided code

1a. java/ch/epfl/cs107/play/game/areagame/actor/Foreground.java

    - Added a new constructor that allows the alpha value to be lower than 1
        * Constructor can be found by searching "[modification]"
        * Used for the day-night cycle [extension]


1b. java/ch/epfl/cs107/play/game/rpg/actor/Dialog.java

    - Modified the two constants at the beginning (FONT_SIZE and MAX_LINE_SIZE)
        * Used for a bigger dialogue content [extension]


1c. res/images/foregrounds/DayNight

    - Added DayNight, a folder of 24 images that form the base of the
    foregrounds to be registered in the areas that have a day-night cycle.
        * All of the images were created using GIMP and then converted from
        .xcf to .png using a free online converter
    
    

2. Added classes and interfaces

2a. In ch/epfl/cs107/play/game/rpg/inventory:
- (class) Inventory
 |  * Class, given that it is designed to be used in a 'has-a' relation
 |_ (interface) Inventory.Holder
        * Interface, given that an inventory holder only needs the method
        boolean possess(InventoryItem)
    
- (interface) InventoryItem
    * Interface, not class, since the only functionalities an item to be stocked
    in an inventory needs are getters for its name, weight and price

Creating the new package rpg/inventory seemed the natural thing to do, since
the above class and interfaces do not completely fit in with any of the previous
rpg packages


2b. In ch/epfl/cs107/play/game/arpg
- (class) Clock..................................................... [extension]
    * Class, given that it is designed to be used in a 'has-a' relation: the
    ARPG 'has-a' clock that is used to update all the areas implementing a
    day-night cycle

- (class) Settings.................................................. [extension]
    * Class containing all the final constants that can be modified in the ARPG
    
Adding the above classes in the main package (arpg) is the sensible choice to
make, given that they are relatively low-level or general enough, while still
being specific to the ARPG


2c. In ch/epfl/cs107/play/game/arpg/actor
- (interface) FlyableEntity
    * Implemented by Projectile, FlameSkull, Waterfall
    
    
- (abstract class) Monster
 |  * Extended by DarkLord, FlameSkull, LogMonster, Pacman
 |_ (enum) Damage: used to represent the 3 types of damage a monster may be
     sensitive to: damage by contact(physical), fire, or magic
    
- (abstract class) Projectile
    * Extended by Arrow, MagicWaterProjectile

- (class) ARPGPlayer
 |_ (enum) State: describes the possible states of an ARPGPlayer: idle, or
 |   attacking with a sword/ bow/ staff
 |_ (class) ARPGPlayerHandler: implements the possible interactions of an
     ARPGPlayer    

- (class) ARPGInventory
    * Extends the RPG Inventory by offering the functionality of ordering its
    contents with a linked list. Could have used a LinkedHashMap when
    implementing the RPG Inventory in order to preserve the insertion order when
    iterating, but then that functionality would be useless to the RPG and
    perform slightly worse, according to:
    http://www.javapractices.com/topic/TopicAction.do?Id=65
        * Is located in the actors because of its close relation with the player.
    
- (class) ARPGPlayerStatusGUI
    * Draws the corresponding ARPGPlayer's health points, inventory items, and
    money or fortune
    * [extension] the quantity of each inventory item is also displayed
    
- (class) Arrow
 |  * Affects monsters sensitive to contact(physical) damage
 |_ (class) ArrowInteractionHandler: implements the possible interactions of an
     arrow
    
- (class) Bomb
 |  * [extension] the timer countdown is displayed near the bomb
 |_ (class) BombInteractionHandler: implements the possible interactions of a
     bomb

- (class) Bow....................................................... [extension]
    * Can be collected by the player and thus added to the inventory
    * Is registered in the Cave area [extension area]

- (class) Bridge.................................................... [extension]
    * A type of Door
    * Added in the Ferme area, near the waterfall
    * Leads to the RouteTemple [extension area]

- (class) CastleDoor
    * A type of Door that is locked by default
    * The other Interactors can "tryToOpen" this door by sending it different
    signals
    
- (class) CastleKey
    * Collectible that can open a CastleDoor by providing its owner with the
      correct signal upon use.

- (class) CaveEntrance.............................................. [extension]
    * A type of Door
    * Can be opened by the explosion of a bomb
    * Added in the Village area, grants access to Cave [extension area]
    
- (class) Coin
    * Collectible that gives the ARPGPlayer a money boost
    
- (class) DarkLord
 |   * Monster sensitive to magic damage, drops a CastleKey once dead
 |_ (enum) DarkLordState: used for switching between DarkLord modes
 |      * Possible states: idle, preparing to teleport, invoking FireSpells,
 |                         teleporting, attacking
 |_ (class) DarkLordInteractionHandler: implements the possible interactions of
     a DarkLord

- (class) FireSpell
 |  * AreaEntity, propagates with a given force
 |  * Burns monsters sensitive to fire damage, can cut grass and trigger bomb
 |  explosions
 |_ (class) FireSpellInteractionHandler: implements the possible interactions of
      a FireSpell
    
- (class) FlameSkull
 |  * Monster sensitive to magic and contact(physical) damage
 |_ (class) FlameSkullInteractionHandler: implements the possible interactions
     of a FlameSkull

- (class) Grass
    * May or may not drop a heart or a coin, according to its probability to
    drop items
    
- (class) Heart
    * Collectible that gives the ARPGPlayer a boost in health points
    
- (class) InteractiveNPC............................................ [extension]
    * NPC that can display messages, once the ARPGPlayer initiates an 
    interaction
    * Used throughout the game in order to provide hints

- (class) LogMonster
 |   * Monster sensitive to magic, contact(physical) and fire damage
 |_ (enum) LogMonsterState: used for switching between LogMonster modes
 |      * Possible states: idle, falling asleep, sleeping, waking up, attacking
 |_ (class) LogMonsterInteractionHandler: implements the possible interactions
     of a LogMonster
    
- (class) MagicWaterProjectile
 |  * Projectile, damages monsters sensitive to magic damage and extinguishes
 |  FireSpells
 |_ (class) MWPInteractionHandler: implements the possible interactions of a
     MagicWaterProjectile
    
- (class) NPC....................................................... [extension]
    * MovableAreaEntity, moves randomly if enabled to move
    
- (class) Orb....................................................... [extension]
    * Grants access to the bridge in the Ferme area, once it is opened
    * In this ARPG, the Orb is opened once an Arrow interacts with it
    
- (class) Pacman.................................................... [extension]
 |  * Monster sensitive to contact(physical) damage
 |  * Moves in a straight line, if stuck its orientation is picked at random
 |  * Added in the Cave [extension area]
 |_ (class) PacmanInteractionHandler: implements the possible interactions of a
     Pacman. Only non-empty interaction is with an ARPGPlayer
    
- (class) Rock...................................................... [extension]
    * AreaEntity used to block the player's path in the Cave
    * Can be destroyed by a bomb exploding

- (class) Shopkeeper................................................ [extension]
 |  * Type of NPC that grants access to a shop
 |  * Also used for a small hint (cut grass to get money)
 |_ (class) ShopkeeperInteractionHandler: implements the possible interactions
 |   of a Shopkeeper. Only non-empty interaction is with an ARPGPlayer
 |_ (class) Shop: implements the shop functionality in the ARPG, imbricated
                  since it makes no sense to declare a shop without an owner
    
- (class) Staff..................................................... [extension]
    * Collectible that can be added to the player's inventory
    * Added in the Temple [extension area]
    
- (class) Waterfall................................................. [extension]
    * Implements FlyableEntity for placement purposes
    * Added in the Ferme area
        * Located in the actors because the waterall could be used to hide
        a hidden object/door. It would then have to interact with the player.

* All of the classes above have been added to this package given that that they
implement or characterize entities specific to the ARPG.

* The interface FlyableEntity was added for the same reason.


2d. In ch/epfl/cs107/play/game/arpg/area
- (abstract class) ARPGArea
- (abstract class) DayNightArea..................................... [extension]
    * cycles through 24 foregrouds according to the hour in the ARPG, the
    foregrounds are kept in a vector
    * each foreground is cut to the size of the area's background
    
- (interface) DayNightCycle......................................... [extension]
    * Implemented by DayNightArea
    * offers some basic functionalities to build foregrounds to a specified size
    and get the correct index according to the hour
    
- (class) Cave...................................................... [extension]
    * Can be accessed from the Village area
    * Home to Pacmen, Rocks, Hearts, Coins and a Bow
    * Grants entrance to CaveTemple
    
- (class) CaveTemple................................................ [extension]
    * Can be accessed from the Cave area
    * Home to an InteractiveNPC that hints the player search for a magic staff
    near a waterfall
    
- (class) Chateau
    * [extension] has a king (InteractiveNPC)
    * End of game area
    
- (class) Ferme
    * Area the player first arrives to
    * Home to 2 LogMonsters
    
- (class) Route
    * Implemented according to the project description
    
- (class) RouteChateau
    * Added some grass along the road, rest is implemented according to the
    project description
    
- (class) RouteTemple............................................... [extension]
    * Grants access to the Temple where a staff can be collected
    
- (class) Spawn..................................................... [extension]
    * Where the game begins
    * The player is guided towards the door, which leads to the Ferme area
    
- (class) Temple.................................................... [extension]
    * Contains a collectible magical staff, with which the player can defeat
    the DarkLord
    
- (class) Village
    * Home to a few movable NPCs, a shopkeeper and an InteractiveNPC
    * The InteractiveNPC hints that the player can open the entrance to the
    cave by using a bomb, and find a bow within the cave

* All of the classes above have been added to this package since they implement
or characterize areas specific to the ARPG

* The DayNightCycle interface was added to this package since it specific to
most of the areas in the ARPG

2e. In ch/epfl/cs107/play/game/arpg/handler
- (interface) ARPGInteractionVisitor
    * Added to this package since it is the basis for the interaction handlers
    of ARPG Interactors


2f. In ch/epfl/cs107/play/game/arpg/inventory
- (enum) ARPGItem
    * Added to this package since it is too specific to be included in another
    arpg package, even if ARPGInventory is in arpg/actor
    


3. Deviations from the project description

- Added more doors that only take up one cell, in order to avoid "diagonal"
transitions between areas

- Modified the CastleDoor so that it takes cell space (this way, the player
can't walk "under" it). In order for the player to exit the Chateau safely,
we also modified the otherSideCoordinates of the doors from Chateau to
RouteChateau (the player would have otherwise failed to be registered properly)

- Added some minor deviations from the instructions.
(e.g tweaked probabilities of monsters, added more interactions between the
actors etc.)

4. List of all extensions

-Spawn
-Cave
-CaveTemple
-RouteTemple
-Temple
-Day-night cycle
-Shopkeeper
-NPC
-InteractiveNPC
-Pacman
-Orb
-Bridge
-CaveEntrance
-Waterfall
-Invulnerability time each time the player takes damage. Shown by a blinking
animation
-Rocks
-Collectable entities (Staff and Bow)
-Dialogues
-(Scenario)

